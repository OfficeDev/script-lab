{
  "id": "54284bab-bb03-431b-8889-40b8f9ca3d96",
  "name": "Report generation",
  "host": "EXCEL",
  "description": "Writes data to the workbook, reads and applies basic formatting, and adds a chart bound to that data.",
  "options": {},
  "files": [
    {
      "id": "627a0ab0-a96c-4860-90a9-0b356a1c1748",
      "name": "index.ts",
      "content": "$(\"#create-report\").click(() => tryCatch(createReport));\n\n/** Load sample data into a new worksheet and create a chart */\nasync function createReport() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.add();\n\n    try {\n      await writeSheetData(sheet);\n      sheet.activate();\n      await context.sync();\n    } catch (error) {\n      // Try to activate the new sheet regardless, to show\n      // how far the processing got before failing\n      sheet.activate();\n      await context.sync();\n\n      // Then re-throw the original error, for appropriate error-handling\n      // (in this snippet, simply showing a notification)\n      throw error;\n    }\n  });\n\n  console.log(\"Success!\", \"Report generation completed.\");\n}\n\nasync function writeSheetData(sheet: Excel.Worksheet) {\n  // Set the report title in the worksheet\n  const titleCell = sheet.getCell(0, 0);\n  titleCell.values = [[\"Quarterly Sales Report\"]];\n  titleCell.format.font.name = \"Century\";\n  titleCell.format.font.size = 26;\n\n  // Create an array containing sample data\n  const headerNames = [\"Product\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"];\n  const data = [\n    [\"Frames\", 5000, 7000, 6544, 4377],\n    [\"Saddles\", 400, 323, 276, 651],\n    [\"Brake levers\", 12000, 8766, 8456, 9812],\n    [\"Chains\", 1550, 1088, 692, 853],\n    [\"Mirrors\", 225, 600, 923, 544],\n    [\"Spokes\", 6005, 7634, 4589, 8765]\n  ];\n\n  // Write the sample data to the specified range in the worksheet\n  // and bold the header row\n  const headerRow = titleCell.getOffsetRange(1, 0).getResizedRange(0, headerNames.length - 1);\n  headerRow.values = [headerNames];\n  headerRow.getRow(0).format.font.bold = true;\n\n  const dataRange = headerRow.getOffsetRange(1, 0).getResizedRange(data.length - 1, 0);\n  dataRange.values = data;\n\n  titleCell.getResizedRange(0, headerNames.length - 1).merge();\n  dataRange.format.autofitColumns();\n\n  const columnRanges = headerNames.map((header, index) => dataRange.getColumn(index).load(\"format/columnWidth\"));\n  await sheet.context.sync();\n\n  // For the header (product name) column, make it a minimum of 100px;\n  const firstColumn = columnRanges.shift();\n  if (firstColumn.format.columnWidth < 100) {\n    console.log(\"Expanding the first column to 100px\");\n    firstColumn.format.columnWidth = 100;\n  }\n\n  // For the remainder, make them identical or a minimum of 60px\n  let minColumnWidth = 60;\n  columnRanges.forEach((column, index) => {\n    console.log(`Column #${index + 1}: auto-fitted width = ${column.format.columnWidth}`);\n    minColumnWidth = Math.max(minColumnWidth, column.format.columnWidth);\n  });\n  console.log(`Setting data columns to a width of ${minColumnWidth} pixels`);\n  dataRange.getOffsetRange(0, 1).getResizedRange(0, -1).format.columnWidth = minColumnWidth;\n\n  // Add a new chart\n  const chart = sheet.charts.add(Excel.ChartType.columnClustered, dataRange, Excel.ChartSeriesBy.columns);\n\n  // Set the properties and format the chart\n  const chartTopRow = dataRange.getLastRow().getOffsetRange(2, 0);\n  chart.setPosition(chartTopRow, chartTopRow.getOffsetRange(14, 0));\n  chart.title.text = \"Quarterly sales chart\";\n  chart.legend.position = \"Right\";\n  chart.legend.format.fill.setSolidColor(\"white\");\n  chart.dataLabels.format.font.size = 15;\n  chart.dataLabels.format.font.color = \"black\";\n\n  const points = chart.series.getItemAt(0).points;\n  points.getItemAt(0).format.fill.setSolidColor(\"pink\");\n  points.getItemAt(1).format.fill.setSolidColor(\"indigo\");\n}\n\n/** Default helper for invoking an action and handling errors. */\nasync function tryCatch(callback) {\n  try {\n    await callback();\n  } catch (error) {\n    OfficeHelpers.UI.notify(error);\n    OfficeHelpers.Utilities.log(error);\n  }\n}\n",
      "language": "typescript",
      "dateCreated": 1545899535066,
      "dateLastModified": 1545899535066
    },
    {
      "id": "5591bee0-d644-4cf2-bfc3-9a35720f1b3a",
      "name": "index.html",
      "content": "<section class=\"ms-font-m\">\n    <p>This sample shows how to load sample data into the worksheet, and then create a chart.</p>\n</section>\n\n<section class=\"samples ms-font-m\">\n    <h3>Try it out</h3>\n    <button id=\"create-report\" class=\"ms-Button\">\n        <span class=\"ms-Button-label\">Create report</span>\n    </button>\n</section>",
      "language": "html",
      "dateCreated": 1545899535066,
      "dateLastModified": 1545899535066
    },
    {
      "id": "9fc25961-d30d-4b00-b3e3-e9901c7ddb0a",
      "name": "index.css",
      "content": "section.samples {\n    margin-top: 20px;\n}\n\nsection.samples .ms-Button, section.setup .ms-Button {\n    display: block;\n    margin-bottom: 5px;\n    margin-left: 20px;\n    min-width: 80px;\n}",
      "language": "css",
      "dateCreated": 1545899535066,
      "dateLastModified": 1545899535066
    },
    {
      "id": "7851e6a0-86e4-4305-8143-5ef6d93b51e9",
      "name": "libraries.txt",
      "content": "https://appsforoffice.microsoft.com/lib/1/hosted/office.js\n@types/office-js\n\noffice-ui-fabric-js@1.4.0/dist/css/fabric.min.css\noffice-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css\n\ncore-js@2.4.1/client/core.min.js\n@types/core-js\n\n@microsoft/office-js-helpers@0.7.4/dist/office.helpers.min.js\n@microsoft/office-js-helpers@0.7.4/dist/office.helpers.d.ts\n\njquery@3.1.1\n@types/jquery@3.3.1\n",
      "language": "libraries",
      "dateCreated": 1545899535066,
      "dateLastModified": 1545899535066
    }
  ],
  "dateCreated": 1545899535066,
  "dateLastModified": 1545899535066
}
