parameters:
  - name: PackageDirectory
    displayName: Directory of the package where the package.json is
    type: string

  - name: PackageName
    displayName: Name of the package to be built
    type: string

  - name: SiteName
    displayName: Name of Azure Site
    type: string

steps:
  - checkout: self
    persistCredentials: true

  - task: NodeTool@0
    displayName: Node install
    inputs:
      versionSpec: '^16.0.0'

  - script: npm ci
    displayName: npm install

  - script: npm run pre-ci
    displayName: Pre-CI Script

  - script: npm run postinstall
    displayName: Post Install Script
    env:
      BRANCH: '$(Build.SourceBranchName)'

  - task: PowerShell@2
    displayName: 'Check diff on post install'
    inputs:
      targetType: 'inline'
      script: |
        # This makes sure that someone ran "npm install" after merging their PR, and that the postinstall doesn't produce any diffs, which are annoying/confusing
        $diffs=$(git --no-pager diff HEAD --exit-code)

        if([string]::IsNullOrEmpty($diffs)){
            Write-Host "No diffs found"
            exit 0
        }
        else {
            Write-Host "Diffs were found"
            exit 1
        }

  - script: npm run style-check
    displayName: Style

  - script: npm run lint
    displayName: Lint
    workingDirectory: ${{ parameters.PackageDirectory }}

  - script: npm run citest
    displayName: Test
    workingDirectory: ${{ parameters.PackageDirectory }}

  - script: cd ${{ parameters.PackageDirectory }} && npm run cibuild
    displayName: 'Build'
    env:
      COMMIT_MESSAGE: '$(Build.SourceVersionMessage)'

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generation Task'
    inputs:
      BuildDropPath: '${{ parameters.PackageDirectory }}/build'

  - script: npm run deploy
    displayName: 'Deploy Package'
    condition: and(succeeded(), eq(variables.isPR, false))
    env:
      HOME: '$(Agent.BuildDirectory)'
      BRANCH: '$(Build.SourceBranchName)'
      PULL_REQUEST: '$(isPR)'
      COMMIT_MESSAGE: '$(Build.SourceVersionMessage)'
      PACKAGE_LOCATION: '${{ parameters.PackageDirectory }}'
      PACKAGE_NAME: '${{ parameters.PackageName }}'
      SITE_NAME: '${{ parameters.SiteName}}'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_ALPHA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_ALPHA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_BETA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_BETA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STAGING: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STAGING)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK_ALPHA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK_ALPHA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK_BETA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK_BETA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK_STAGING: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_STORYBOOK_STAGING)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER_ALPHA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER_ALPHA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER_BETA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER_BETA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER_STAGING: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_RUNNER_STAGING)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER_ALPHA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER_ALPHA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER_BETA: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER_BETA)'
      DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER_STAGING: '$(DEPLOYMENT_PASSWORD_SCRIPT_LAB_REACT_SERVER_STAGING)'
